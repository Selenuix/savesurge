/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Enrichment } from './enrichment';
import { ProprietaryBankTransactionCode } from './proprietaryBankTransactionCode';
import { AddressDetails } from './addressDetails';
import { TransactionBalance } from './transactionBalance';
import { Amount } from './amount';
import { IsoBankTransactionCode } from './isoBankTransactionCode';
import { CurrencyExchange } from './currencyExchange';
import { StatementReference } from './statementReference';
import { TransactionPayerDetails } from './transactionPayerDetails';
import { Merchant } from './merchant';
import { TransactionPayeeDetails } from './transactionPayeeDetails';
import { TransactionChargeDetails } from './transactionChargeDetails';
import { TransactionStatusEnum } from './transactionStatusEnum';


/**
 * Details of a transaction (credit or debit) that has occurred on the account.
 */
export interface Transaction { 
    /**
     * Unique identifier of the transaction.
     */
    id?: string;
    date?: string;
    /**
     * Date and time in UTC format of when a transaction was booked.
     */
    bookingDateTime?: string;
    /**
     * Date and time in UTC format when the funds either cease to be available (for debit transactions) or become available (for credit transactions) to the account owner.
     */
    valueDateTime?: string;
    status?: TransactionStatusEnum;
    /**
     * The transaction amount.
     */
    amount?: number;
    /**
     * Currency the transaction amount is denoted in. Specified as a 3-letter ISO 4217 code.
     */
    currency?: string;
    transactionAmount?: Amount;
    grossAmount?: Amount;
    currencyExchange?: CurrencyExchange;
    chargeDetails?: TransactionChargeDetails;
    reference?: string;
    statementReferences?: Array<StatementReference>;
    description?: string;
    /**
     * Further details on the transaction. This is narrative data, caught as unstructured text.
     */
    transactionInformation?: Array<string>;
    addressDetails?: AddressDetails;
    isoBankTransactionCode?: IsoBankTransactionCode;
    proprietaryBankTransactionCode?: ProprietaryBankTransactionCode;
    balance?: TransactionBalance;
    payeeDetails?: TransactionPayeeDetails;
    payerDetails?: TransactionPayerDetails;
    merchant?: Merchant;
    enrichment?: Enrichment;
    /**
     * Additional information that cannot be captured in a structured field or block.
     */
    supplementaryData?: object;
    /**
     * __Optional__. Specifies the Mutability of the Transaction record.<ul><li>A transaction with a `Status` of `Pending` is mutable.</li><li>A transaction with a `Status` of `Booked` where the `TransactionMutability` flag is not specified is not guaranteed to be immutable (although in most instances it will be).</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Immutable` is immutable.</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Mutable` is mutable.</li></ul>
     */
    transactionMutability?: string;
}
export namespace Transaction {
}


