/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiErrorResponseV2 } from '../model/apiErrorResponseV2';
// @ts-ignore
import { GetAccountsTransactionsCategorised200Response } from '../model/getAccountsTransactionsCategorised200Response';
// @ts-ignore
import { GetCategorisationAccountType200Response } from '../model/getCategorisationAccountType200Response';
// @ts-ignore
import { PostAccountsAccountIdTransactionsCategorisation201Response } from '../model/postAccountsAccountIdTransactionsCategorisation201Response';
// @ts-ignore
import { PostAccountsAccountIdTransactionsCategorisationRequest } from '../model/postAccountsAccountIdTransactionsCategorisationRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    EnrichmentServiceInterface
} from './enrichment.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class EnrichmentService implements EnrichmentServiceInterface {

    protected basePath = 'https://api.yapily.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get Categorised Transactions
     * Retrieve a set of categorised transactions using a provided categorisation ID (__Note__: A categorisation ID will only be valid for 30 mins after a __transactions.categorisation.successful__ wedhook has be received)
     * @param consent __Mandatory__. The &#x60;consent-token&#x60; containing the user\&#39;s authorisation to make the request.
     * @param accountId Unique identifier for account
     * @param categorisationId Unique identifier for transaction categorisation request
     * @param subApplication The sub-application ID to which event type is being subscribed to
     * @param limit __Optional__. The maximum number of transaction records to be returned. Must be between 100 and 1000. If not specified will default to 100.
     * @param page __Optional__. The page number to be returned. If not specified will default to 1.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountsTransactionsCategorised(consent: string, accountId: string, categorisationId: string, subApplication?: string, limit?: number, page?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<GetAccountsTransactionsCategorised200Response>;
    public getAccountsTransactionsCategorised(consent: string, accountId: string, categorisationId: string, subApplication?: string, limit?: number, page?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetAccountsTransactionsCategorised200Response>>;
    public getAccountsTransactionsCategorised(consent: string, accountId: string, categorisationId: string, subApplication?: string, limit?: number, page?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetAccountsTransactionsCategorised200Response>>;
    public getAccountsTransactionsCategorised(consent: string, accountId: string, categorisationId: string, subApplication?: string, limit?: number, page?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (consent === null || consent === undefined) {
            throw new Error('Required parameter consent was null or undefined when calling getAccountsTransactionsCategorised.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountsTransactionsCategorised.');
        }
        if (categorisationId === null || categorisationId === undefined) {
            throw new Error('Required parameter categorisationId was null or undefined when calling getAccountsTransactionsCategorised.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }

        let localVarHeaders = this.defaultHeaders;
        if (consent !== undefined && consent !== null) {
            localVarHeaders = localVarHeaders.set('consent', String(consent));
        }
        if (subApplication !== undefined && subApplication !== null) {
            localVarHeaders = localVarHeaders.set('sub-application', String(subApplication));
        }

        let localVarCredential: string | undefined;
        // authentication (basicAuth) required
        localVarCredential = this.configuration.lookupCredential('basicAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json;charset=UTF-8'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/accounts/${this.configuration.encodeParam({name: "accountId", value: accountId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/categorisation/${this.configuration.encodeParam({name: "categorisationId", value: categorisationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<GetAccountsTransactionsCategorised200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the list of all categories for a specific account type
     * Returns the list of categories that can be returned for a specific account type (consumer or business)
     * @param accountType type of bank account (consumer or business)
     * @param subApplication The sub-application ID to which event type is being subscribed to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCategorisationAccountType(accountType: string, subApplication?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<GetCategorisationAccountType200Response>;
    public getCategorisationAccountType(accountType: string, subApplication?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetCategorisationAccountType200Response>>;
    public getCategorisationAccountType(accountType: string, subApplication?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetCategorisationAccountType200Response>>;
    public getCategorisationAccountType(accountType: string, subApplication?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accountType === null || accountType === undefined) {
            throw new Error('Required parameter accountType was null or undefined when calling getCategorisationAccountType.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (subApplication !== undefined && subApplication !== null) {
            localVarHeaders = localVarHeaders.set('sub-application', String(subApplication));
        }

        let localVarCredential: string | undefined;
        // authentication (basicAuth) required
        localVarCredential = this.configuration.lookupCredential('basicAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json;charset=UTF-8'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/transactions/categorisation/categories/${this.configuration.encodeParam({name: "accountType", value: accountType, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<GetCategorisationAccountType200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Trigger transaction categorisation
     * Trigger categorisation for a specified set of transactions
     * @param consent __Mandatory__. The &#x60;consent-token&#x60; containing the user\&#39;s authorisation to make the request.
     * @param accountId Unique identifier for account
     * @param psuId __Conditional__. Represents the user\&#39;s login ID for the &#x60;Institution&#x60; to a personal account. &lt;br&gt;&lt;br&gt;See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param psuCorporateId __Conditional__. Represents the user\&#39;s login ID for the &#x60;Institution&#x60; to a business account. &lt;br&gt;&lt;br&gt;See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param psuIpAddress __Conditional__. The IP address of the PSU. &lt;br&gt;&lt;br&gt;See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
     * @param subApplication The sub-application ID to which event type is being subscribed to
     * @param postAccountsAccountIdTransactionsCategorisationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAccountsAccountIdTransactionsCategorisation(consent: string, accountId: string, psuId?: string, psuCorporateId?: string, psuIpAddress?: string, subApplication?: string, postAccountsAccountIdTransactionsCategorisationRequest?: PostAccountsAccountIdTransactionsCategorisationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<PostAccountsAccountIdTransactionsCategorisation201Response>;
    public postAccountsAccountIdTransactionsCategorisation(consent: string, accountId: string, psuId?: string, psuCorporateId?: string, psuIpAddress?: string, subApplication?: string, postAccountsAccountIdTransactionsCategorisationRequest?: PostAccountsAccountIdTransactionsCategorisationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostAccountsAccountIdTransactionsCategorisation201Response>>;
    public postAccountsAccountIdTransactionsCategorisation(consent: string, accountId: string, psuId?: string, psuCorporateId?: string, psuIpAddress?: string, subApplication?: string, postAccountsAccountIdTransactionsCategorisationRequest?: PostAccountsAccountIdTransactionsCategorisationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostAccountsAccountIdTransactionsCategorisation201Response>>;
    public postAccountsAccountIdTransactionsCategorisation(consent: string, accountId: string, psuId?: string, psuCorporateId?: string, psuIpAddress?: string, subApplication?: string, postAccountsAccountIdTransactionsCategorisationRequest?: PostAccountsAccountIdTransactionsCategorisationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (consent === null || consent === undefined) {
            throw new Error('Required parameter consent was null or undefined when calling postAccountsAccountIdTransactionsCategorisation.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling postAccountsAccountIdTransactionsCategorisation.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (consent !== undefined && consent !== null) {
            localVarHeaders = localVarHeaders.set('consent', String(consent));
        }
        if (psuId !== undefined && psuId !== null) {
            localVarHeaders = localVarHeaders.set('psu-id', String(psuId));
        }
        if (psuCorporateId !== undefined && psuCorporateId !== null) {
            localVarHeaders = localVarHeaders.set('psu-corporate-id', String(psuCorporateId));
        }
        if (psuIpAddress !== undefined && psuIpAddress !== null) {
            localVarHeaders = localVarHeaders.set('psu-ip-address', String(psuIpAddress));
        }
        if (subApplication !== undefined && subApplication !== null) {
            localVarHeaders = localVarHeaders.set('sub-application', String(subApplication));
        }

        let localVarCredential: string | undefined;
        // authentication (basicAuth) required
        localVarCredential = this.configuration.lookupCredential('basicAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/json;charset=UTF-8'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/accounts/${this.configuration.encodeParam({name: "accountId", value: accountId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/categorisation`;
        return this.httpClient.request<PostAccountsAccountIdTransactionsCategorisation201Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postAccountsAccountIdTransactionsCategorisationRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
