/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiErrorResponseV2 } from '../model/models';
import { DeleteWebhook200Response } from '../model/models';
import { GetRegisteredWebhooks200Response } from '../model/models';
import { GetWebhookEventsCategories200Response } from '../model/models';
import { RegisterWebhook201Response } from '../model/models';
import { RegisterWebhookRequest } from '../model/models';
import { WebhookSecretResetRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface WebhooksServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Webhook Event
     * Delete a webhook event for a specified webhook ID, unregistering it from receiving any further notifications for the subscribed event categories in your application.
     * @param webhookId Registered webhook id
     * @param subApplication The sub-application ID to which event type is being subscribed to
     */
    deleteWebhook(webhookId: string, subApplication?: string, extraHttpRequestParams?: any): Observable<DeleteWebhook200Response>;

    /**
     * Retrieve All Webhook Events
     * Retrieve the list of registered webhooks for your application
     * @param subApplication The sub-application ID to which event type is being subscribed to
     */
    getRegisteredWebhooks(subApplication?: string, extraHttpRequestParams?: any): Observable<GetRegisteredWebhooks200Response>;

    /**
     * Get Webhook Categories
     * Retrieve a comprehensive list of event categories that can be registered for webhook notifications in your application. These event categories can be used to subscribe a webhook to specific events, enabling your application to receive real-time notifications when these events occur.
     */
    getWebhookEventsCategories(extraHttpRequestParams?: any): Observable<GetWebhookEventsCategories200Response>;

    /**
     * Register Webhook Event
     * Register a webhook to one or multiple event categories to receive real-time notifications when specific events occur in your application.
     * @param subApplication The sub-application ID to which event type is being subscribed to
     * @param registerWebhookRequest 
     */
    registerWebhook(subApplication?: string, registerWebhookRequest?: RegisterWebhookRequest, extraHttpRequestParams?: any): Observable<RegisterWebhook201Response>;

    /**
     * Reset Webhook Secret
     * Reset webhook secret for a webhook that is already registered to your application
     * @param webhookId Registered webhook id
     * @param subApplication The sub-application ID to which event type is being subscribed to
     * @param webhookSecretResetRequest 
     */
    webhookSecretReset(webhookId: string, subApplication?: string, webhookSecretResetRequest?: WebhookSecretResetRequest, extraHttpRequestParams?: any): Observable<RegisterWebhook201Response>;

}
