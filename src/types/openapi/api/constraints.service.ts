/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApiListResponseOfDataConstraints } from '../model/apiListResponseOfDataConstraints';
// @ts-ignore
import { ApiListResponseOfPaymentConstraints } from '../model/apiListResponseOfPaymentConstraints';
// @ts-ignore
import { ApiResponseError } from '../model/apiResponseError';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    ConstraintsServiceInterface
} from './constraints.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class ConstraintsService implements ConstraintsServiceInterface {

    protected basePath = 'https://api.yapily.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get Data Constraints Rules
     * Get Data Constraints Rules against an Institution for Account Authorisation requests
     * @param institutionIds Unique Id(s) of the &#x60;Institution&#x60;(s) to retrieve the Data Constraints for. Multiple institutionIds need to be separated by &#x60;,&#x60;
     * @param institutionCountryCode Country code of the &#x60;Institution&#x60;(s). Ensure that the country code matches the respective institutionIds; any mismatch will result in an HTTP 404 error response.
     * @param endpointPath The path on the API that is associated with the operation for which constraints are to be retrieved
     * @param endpointMethod The HTTP method that is associated with the operation for which constraints are to be retrieved
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<ApiListResponseOfDataConstraints>;
    public getAccountConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiListResponseOfDataConstraints>>;
    public getAccountConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiListResponseOfDataConstraints>>;
    public getAccountConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (institutionIds === null || institutionIds === undefined) {
            throw new Error('Required parameter institutionIds was null or undefined when calling getAccountConstraintsRulesByInstitution.');
        }
        if (institutionCountryCode === null || institutionCountryCode === undefined) {
            throw new Error('Required parameter institutionCountryCode was null or undefined when calling getAccountConstraintsRulesByInstitution.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (institutionIds) {
            institutionIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'institutionIds');
            })
        }
        if (institutionCountryCode !== undefined && institutionCountryCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>institutionCountryCode, 'institutionCountryCode');
        }
        if (endpointPath !== undefined && endpointPath !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endpointPath, 'endpointPath');
        }
        if (endpointMethod !== undefined && endpointMethod !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endpointMethod, 'endpointMethod');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (basicAuth) required
        localVarCredential = this.configuration.lookupCredential('basicAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json;charset=UTF-8'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/institutions/constraints/data`;
        return this.httpClient.request<ApiListResponseOfDataConstraints>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Payment Constraints Rules
     * Retrieve institution specific constraints for payment authorisation and submission requests
     * @param institutionIds Unique Id(s) of the &#x60;Institution&#x60;(s) to retrieve the Payment Constraints for. Multiple institutionIds need to be separated by &#x60;,&#x60;
     * @param institutionCountryCode Country code of the &#x60;Institution&#x60;(s). Ensure that the country code matches the respective institutionIds; any mismatch will result in an HTTP 404 error response.
     * @param paymentType Type of payment to retrieve payment constraints for
     * @param endpointPath The path on the API that is associated with the operation for which constraints are to be retrieved
     * @param endpointMethod The HTTP method that is associated with the operation for which constraints are to be retrieved
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaymentConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, paymentType: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT', endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<ApiListResponseOfPaymentConstraints>;
    public getPaymentConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, paymentType: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT', endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ApiListResponseOfPaymentConstraints>>;
    public getPaymentConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, paymentType: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT', endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ApiListResponseOfPaymentConstraints>>;
    public getPaymentConstraintsRulesByInstitution(institutionIds: Array<string>, institutionCountryCode: string, paymentType: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT', endpointPath?: string, endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json;charset=UTF-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (institutionIds === null || institutionIds === undefined) {
            throw new Error('Required parameter institutionIds was null or undefined when calling getPaymentConstraintsRulesByInstitution.');
        }
        if (institutionCountryCode === null || institutionCountryCode === undefined) {
            throw new Error('Required parameter institutionCountryCode was null or undefined when calling getPaymentConstraintsRulesByInstitution.');
        }
        if (paymentType === null || paymentType === undefined) {
            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentConstraintsRulesByInstitution.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (institutionIds) {
            institutionIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'institutionIds');
            })
        }
        if (institutionCountryCode !== undefined && institutionCountryCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>institutionCountryCode, 'institutionCountryCode');
        }
        if (paymentType !== undefined && paymentType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>paymentType, 'paymentType');
        }
        if (endpointPath !== undefined && endpointPath !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endpointPath, 'endpointPath');
        }
        if (endpointMethod !== undefined && endpointMethod !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endpointMethod, 'endpointMethod');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (basicAuth) required
        localVarCredential = this.configuration.lookupCredential('basicAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json;charset=UTF-8'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/institutions/constraints/payments`;
        return this.httpClient.request<ApiListResponseOfPaymentConstraints>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
