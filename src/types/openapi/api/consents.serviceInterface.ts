/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiErrorResponse } from '../model/models';
import { ApiListResponseOfConsent } from '../model/models';
import { ApiResponseError } from '../model/models';
import { ApiResponseOfConsent } from '../model/models';
import { ApiResponseOfConsentDeleteResponse } from '../model/models';
import { Consent } from '../model/models';
import { ConsentAuthCodeRequest } from '../model/models';
import { ExtendConsentRequest } from '../model/models';
import { OneTimeTokenRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ConsentsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Consent
     * Delete a consent using the consent Id
     * @param consentId __Mandatory__. The consent Id of the &#x60;Consent&#x60; to update.
     * @param forceDelete __Optional__. Whether to force the deletion.
     */
    _delete(consentId: string, forceDelete?: boolean, extraHttpRequestParams?: any): Observable<ApiResponseOfConsentDeleteResponse>;

    /**
     * Exchange OAuth2 Code
     * Used to obtain a Yapily Consent object containing the &#x60;consentToken&#x60; once the user has authenticated and you have an OAuth2 authorisation code &#x60;auth-code&#x60; and state &#x60;auth-state&#x60;.
     * @param consentAuthCodeRequest 
     */
    createConsentWithCode(consentAuthCodeRequest: ConsentAuthCodeRequest, extraHttpRequestParams?: any): Observable<Consent>;

    /**
     * Extend Consent
     * Used to indicate to Yapily that reconfirmation has occurred for a given Consent, and to update lastUpdatedAt and reconfirmBy for that Consent. Returns the Consent.
     * @param consentId __Mandatory__. The consent Id of the &#x60;Consent&#x60; to update.
     * @param extendConsentRequest 
     */
    extendConsent(consentId: string, extendConsentRequest: ExtendConsentRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfConsent>;

    /**
     * Get Consent
     * Get consent using the consent Id
     * @param consentId __Mandatory__. The consent Id of the &#x60;Consent&#x60; to update.
     */
    getConsentById(consentId: string, extraHttpRequestParams?: any): Observable<ApiResponseOfConsent>;

    /**
     * Exchange One Time Token
     * Exchange a One-time-token for the consent token
     * @param oneTimeTokenRequest 
     */
    getConsentBySingleAccessConsent(oneTimeTokenRequest: OneTimeTokenRequest, extraHttpRequestParams?: any): Observable<Consent>;

    /**
     * Get Consents
     * Used to retrieve all the consents created for each user within an application
     * @param filterApplicationUserId __Optional__. Filter records based on the list of &#x60;applicationUserId&#x60; users provided.
     * @param filterUserUuid __Optional__. Filter records based on the list of &#x60;userUuid&#x60; users provided.
     * @param filterInstitution __Optional__. Filter records based on the list of &#x60;Institution&#x60; provided.
     * @param filterStatus __Optional__. Filter records based on the list of &#x60;Consent&#x60; [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c&#x3D;200&amp;path&#x3D;data/status&amp;t&#x3D;response).
     * @param from __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSSZ). 
     * @param before __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSSZ).
     * @param limit __Optional__. The maximum number of transaction records to be returned. Must be between 1 and 1000.
     * @param offset __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.
     */
    getConsents(filterApplicationUserId?: Set<string>, filterUserUuid?: Set<string>, filterInstitution?: Set<string>, filterStatus?: Set<string>, from?: string, before?: string, limit?: number, offset?: number, extraHttpRequestParams?: any): Observable<ApiListResponseOfConsent>;

}
