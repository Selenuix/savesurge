/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiErrorResponse } from '../model/models';
import { ApiResponseOfFundsConfirmationResponse } from '../model/models';
import { ApiResponseOfNonSweepingAuthorisationResponse } from '../model/models';
import { ApiResponseOfSubmissionResponse } from '../model/models';
import { ApiResponseOfSweepingAuthorisationResponse } from '../model/models';
import { FundsConfirmationRequest } from '../model/models';
import { NonSweepingAuthorisationRequest } from '../model/models';
import { SubmissionRequest } from '../model/models';
import { SweepingAuthorisationRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface VariableRecurringPaymentsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Non-Sweeping Variable Recurring Payment Authorisation
     * Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Non-Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). &lt;br&gt;&lt;br&gt;See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.&lt;br&gt;&lt;br&gt;Features:&lt;ul&gt;&lt;li&gt;&#x60;INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING&#x60;&lt;/li&gt;&lt;/ul&gt;
     * @param nonSweepingAuthorisationRequest 
     */
    createNonSweepingAuthorisation(nonSweepingAuthorisationRequest: NonSweepingAuthorisationRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfNonSweepingAuthorisationResponse>;

    /**
     * Create Sweeping Variable Recurring Payment Authorisation
     * Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). &lt;br&gt;&lt;br&gt;See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.&lt;br&gt;&lt;br&gt;Features:&lt;ul&gt;&lt;li&gt;&#x60;INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING&#x60;&lt;/li&gt;&lt;/ul&gt;
     * @param sweepingAuthorisationRequest 
     */
    createSweepingAuthorisation(sweepingAuthorisationRequest: SweepingAuthorisationRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfSweepingAuthorisationResponse>;

    /**
     * Confirm Funds for Variable Recurring Payment
     * Confirms whether there are available funds on the Payer account to execute a Variable Recurring Payment after obtaining the user\&#39;s authorisation. &lt;br&gt;&lt;br&gt;Features:&lt;ul&gt;&lt;li&gt;&#x60;VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION&#x60;&lt;/li&gt;&lt;/ul&gt;
     * @param consent __Mandatory__. The &#x60;consent-token&#x60; containing the user\&#39;s authorisation to make the request.
     * @param fundsConfirmationRequest 
     */
    createVrpFundsConfirmation(consent: string, fundsConfirmationRequest: FundsConfirmationRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfFundsConfirmationResponse>;

    /**
     * Create Variable Recurring Payment
     * Creates a Variable Recurring Payment transaction after obtaining the user\&#39;s authorisation.&lt;br&gt;&lt;br&gt;Features:&lt;ul&gt;&lt;li&gt;&#x60;CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING&#x60;&lt;/li&gt;&lt;li&gt;&#x60;CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING&#x60;&lt;/li&gt;&lt;/ul&gt;
     * @param consent __Mandatory__. The &#x60;consent-token&#x60; containing the user\&#39;s authorisation to make the request.
     * @param submissionRequest 
     */
    createVrpPayment(consent: string, submissionRequest: SubmissionRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfSubmissionResponse>;

    /**
     * Get Non-Sweeping Variable Recurring Payment Consent Details
     * Get Non-Sweeping Variable Recurring Payments consent details using the consent Id
     * @param consentId __Mandatory__. The consent Id of the &#x60;Variable Recurring Payments Consent&#x60; to retrieve.
     */
    getNonSweepingVrpConsentById(consentId: string, extraHttpRequestParams?: any): Observable<ApiResponseOfNonSweepingAuthorisationResponse>;

    /**
     * Get Sweeping Variable Recurring Payment Consent Details
     * Get Sweeping Variable Recurring Payments consent details using the consent Id
     * @param consentId __Mandatory__. The consent Id of the &#x60;Variable Recurring Payments Consent&#x60; to retrieve.
     */
    getSweepingVrpConsentById(consentId: string, extraHttpRequestParams?: any): Observable<ApiResponseOfSweepingAuthorisationResponse>;

    /**
     * Get Variable Recurring Payment Details
     * Get Variable Recurring Payment details using the Payment Id
     * @param paymentId __Mandatory__. The Payment Id of the &#x60;Variable Recurring Payments&#x60; to retrieve.
     * @param consent __Mandatory__. The consent token containing the user\&#39;s authorisation to make the &#x60;Variable Recurring Payments&#x60; request.
     */
    getVrpPaymentDetails(paymentId: string, consent: string, extraHttpRequestParams?: any): Observable<ApiResponseOfSubmissionResponse>;

}
