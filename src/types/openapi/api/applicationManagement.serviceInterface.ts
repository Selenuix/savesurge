/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiErrorResponse } from '../model/models';
import { ApiListOfApplicationResponse } from '../model/models';
import { ApiResponseOfApplicationResponse } from '../model/models';
import { ApplicationRequest } from '../model/models';
import { SearchApplicationsPublicFilterValuesParameter } from '../model/models';
import { ValidationErrorResponse } from '../model/models';
import { VrpConfiguration } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ApplicationManagementServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create application VRP configuration by Application Id
     * Create application vrp configuration
     * @param applicationId The id of the application that vrp configuration being created for
     * @param vrpConfiguration The vrp configuration to create
     */
    createApplicationVRPConfigurationByApplicationId(applicationId: string, vrpConfiguration: VrpConfiguration, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Creates a sub-application for the root application id provided in the authentication token
     * Creates a sub-application under the given root application id provided in the authentication token. The sub-application can use the root\&#39;s credentials to call the API
     * @param applicationRequest The sub-application to create
     */
    createSubApplication(applicationRequest: ApplicationRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfApplicationResponse>;

    /**
     * Delete an application
     * Deletes the application with the given ID in the path
     * @param applicationId The id of the application being deleted
     */
    deleteApplication(applicationId: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get application details
     * Retrieves an application by the id provided in the path
     * @param applicationId The id of the application being fetched
     */
    getApplicationById(applicationId: string, extraHttpRequestParams?: any): Observable<ApiResponseOfApplicationResponse>;

    /**
     * Get application VRP configuration by Application Id
     * Get application vrp configuration
     * @param applicationId The id of the application that vrp configuration being created for
     */
    getApplicationVRPConfigurationByApplicationId(applicationId: string, extraHttpRequestParams?: any): Observable<VrpConfiguration>;

    /**
     * Retrieve sub-applications for the root application provided in the authentication token.
     * Retrieves sub-applications for the root application provided in the authentication token. If a sub-application is provided in the authentication token, it will return an empty list.
     * @param publicFilterValues 
     */
    searchApplications(publicFilterValues?: SearchApplicationsPublicFilterValuesParameter, extraHttpRequestParams?: any): Observable<ApiListOfApplicationResponse>;

    /**
     * Update an Application
     * Updates the application properties for the application with the given ID in the path
     * @param applicationId The id of the application being updated
     * @param applicationRequest The application to update
     */
    updateApplication(applicationId: string, applicationRequest: ApplicationRequest, extraHttpRequestParams?: any): Observable<ApiResponseOfApplicationResponse>;

    /**
     * Update application VRP configuration by Application Id
     * Update application vrp configuration
     * @param applicationId The id of the application that vrp configuration being created for
     * @param vrpConfiguration The vrp configuration to create
     */
    updateApplicationVRPConfigurationByApplicationId(applicationId: string, vrpConfiguration: VrpConfiguration, extraHttpRequestParams?: any): Observable<{}>;

}
