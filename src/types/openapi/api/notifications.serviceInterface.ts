/**
 * Yapily API
 *
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiListResponseOfEventSubscriptionResponse } from '../model/models';
import { ApiResponseOfEventSubscriptionDeleteResponse } from '../model/models';
import { ApiResponseOfEventSubscriptionResponse } from '../model/models';
import { EventSubscriptionRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface NotificationsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Event Subscription
     * Used to subscribe to notifications relating to a specified event type.
     * @param eventSubscriptionRequest 
     * @param subApplication The sub-application ID to which event type is being subscribed to
     */
    createEventSubscription(eventSubscriptionRequest: EventSubscriptionRequest, subApplication?: string, extraHttpRequestParams?: any): Observable<ApiResponseOfEventSubscriptionResponse>;

    /**
     * Delete Event Subscription
     * Used to unsubscribe to notifications relating to a specified event type.
     * @param eventTypeId Unique identifier of the event type (for which notifications will be sent). 
     * @param subApplication The sub-application ID for which event type will be deleted
     */
    deleteEventSubscriptionById(eventTypeId: string, subApplication?: string, extraHttpRequestParams?: any): Observable<ApiResponseOfEventSubscriptionDeleteResponse>;

    /**
     * Get Event Subscription
     * Used to get details of your subscription to a specified event type.
     * @param eventTypeId Unique identifier of the event type (for which notifications will be sent). 
     * @param subApplication The sub-application ID to which event type is being subscribed to
     */
    getEventSubscriptionById(eventTypeId: string, subApplication?: string, extraHttpRequestParams?: any): Observable<ApiResponseOfEventSubscriptionResponse>;

    /**
     * Get Event Subscriptions
     * Get all event subscriptions that your application is subscribed to
     * @param subApplication The sub-application ID for which all event subscriptions will be returned
     */
    getEventSubscriptions(subApplication?: string, extraHttpRequestParams?: any): Observable<ApiListResponseOfEventSubscriptionResponse>;

}
